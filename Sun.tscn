[gd_scene load_steps=5 format=3 uid="uid://bwnysrwgdhxov"]

[ext_resource type="Texture2D" uid="uid://bqxmh8la0yr30" path="res://assets/2k_sun.jpg" id="1_pobnd"]

[sub_resource type="Shader" id="Shader_op3bi"]
code = "// NOTE: Shader automatically converted from Godot Engine 4.2.2.stable's StandardMaterial3D.

shader_type spatial;
render_mode blend_mix,depth_draw_opaque,cull_back,diffuse_burley,specular_schlick_ggx;
uniform vec4 albedo : source_color;
uniform sampler2D texture_albedo : source_color,filter_linear_mipmap,repeat_enable;
uniform float point_size : hint_range(0,128);
uniform float roughness : hint_range(0,1);
uniform sampler2D texture_metallic : hint_default_white,filter_linear_mipmap,repeat_enable;
uniform vec4 metallic_texture_channel;
uniform sampler2D texture_roughness : hint_roughness_r,filter_linear_mipmap,repeat_enable;
uniform float specular;
uniform float metallic;
uniform sampler2D texture_emission : source_color, hint_default_black,filter_linear_mipmap,repeat_enable;
uniform vec4 emission : source_color;
uniform float emission_energy;
uniform vec3 uv1_scale;
uniform vec3 uv1_offset;
uniform vec3 uv2_scale;
uniform vec3 uv2_offset;


void vertex() {
	UV=UV*uv1_scale.xy+uv1_offset.xy;
	VERTEX.y += sin(TIME * 0.5 + (VERTEX.x + VERTEX.z) * 0.2);
	VERTEX.x += sin(TIME * 0.5 + (VERTEX.y + VERTEX.z) * 0.2);
	VERTEX.z += sin(TIME * 0.5 + (VERTEX.x + VERTEX.y) * 0.2);
}






void fragment() {
	vec2 base_uv = UV;
	vec4 albedo_tex = texture(texture_albedo,base_uv);
	ALBEDO = albedo.rgb * albedo_tex.rgb;
	float metallic_tex = dot(texture(texture_metallic,base_uv),metallic_texture_channel);
	METALLIC = metallic_tex * metallic;
	vec4 roughness_texture_channel = vec4(1.0,0.0,0.0,0.0);
	float roughness_tex = dot(texture(texture_roughness,base_uv),roughness_texture_channel);
	ROUGHNESS = roughness_tex * roughness;
	SPECULAR = specular;
	vec3 emission_tex = texture(texture_emission,base_uv).rgb;
	EMISSION = (emission.rgb+emission_tex)*emission_energy;
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_khmag"]
render_priority = 0
shader = SubResource("Shader_op3bi")
shader_parameter/albedo = Color(1, 1, 1, 1)
shader_parameter/point_size = 1.0
shader_parameter/roughness = 1.0
shader_parameter/metallic_texture_channel = null
shader_parameter/specular = 0.5
shader_parameter/metallic = 0.0
shader_parameter/emission = Color(0, 0, 0, 1)
shader_parameter/emission_energy = 2.0
shader_parameter/uv1_scale = Vector3(1, 1, 1)
shader_parameter/uv1_offset = Vector3(0, 0, 0)
shader_parameter/uv2_scale = Vector3(1, 1, 1)
shader_parameter/uv2_offset = Vector3(0, 0, 0)
shader_parameter/texture_albedo = ExtResource("1_pobnd")
shader_parameter/texture_emission = ExtResource("1_pobnd")

[sub_resource type="SphereMesh" id="SphereMesh_1jtkw"]
material = SubResource("ShaderMaterial_khmag")
radius = 400.0
height = 800.0

[node name="Sun" type="MeshInstance3D"]
mesh = SubResource("SphereMesh_1jtkw")
